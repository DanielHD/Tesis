legislator.samples <- as.matrix(round(result$legislators[[1]],7))
pivots.samples <- apply(legislator.samples, 1, function(x){quantile(x, probs=c(0,0.333,0.4,0.5,0.6,0.667,1))})
pivots.meansds <- t(rbind(apply(pivots.samples, 1, mean), apply(pivots.samples, 1, sd)))
colnames(pivots.meansds) <- c("mean","sd")
names.samples <- apply(legislator.samples, 1, function(x){names(sort(x)[c(0.01,0.333,0.4,0.5,0.6,0.667,1) * length(x)])})
names.pivots <- apply(names.samples, 1, function(x){table(x) / length(x)})
names(names.pivots) <- c("0%","33.3%","40%","50%","60%","66.7%","100%")
print(names.pivots)
Republican.samples <- legislator.samples[,party2==200]
Republican.medians <- apply(Republican.samples, 1, median)
Republican.median.meansds <- c(mean(Republican.medians), sd(Republican.medians))
names(Republican.median.meansds) <- c("mean","sd")
print(Republican.median.meansds)
Democrat.samples <- legislator.samples[,party2==100]
Democrat.medians <- apply(Democrat.samples, 1, median)
Democrat.median.meansds <- c(mean(Democrat.medians), sd(Democrat.medians))
names(Democrat.median.meansds) <- c("mean","sd")
print(Democrat.median.meansds)
DemSharehouse <- length(Democrat.samples)/(length(Democrat.samples)+length(Republican.samples))
RepubSharehouse <- length(Republican.samples)/(length(Democrat.samples)+length(Republican.samples))
gvdenshouse <- density(Democrat.samples)
gvdenshouse$y <- gvdenshouse$y*DemSharehouse
bvdenshouse   <- density(Republican.samples)
bvdenshouse$y <- bvdenshouse$y*RepubSharehouse
ymax1 <- max(gvdenshouse$y)
ymax2 <- max(bvdenshouse$y)
ymax3 <- max(ymax1,ymax2)
ymax3 <- ymax3 + 0.05
plot(gvdenshouse,xlab="",ylab="",
main="",
xlim=c(-2.0,2.0),ylim=c(0,ymax3),
type="l",lwd=4,col="blue",axes=FALSE,font=2)
axis(1,font=2)
axis(2,font=2,cex=1.2)
# Main title
mtext("114th House (2015) From alpha-NOMINATE ",side=3,line=-1.50,cex=1.2,font=2)
# x-axis title
mtext("Liberal-Conservative",side=1,line=2.75,cex=1.2)
# y-axis title
mtext("Density",side=2,line=2.5,cex=1.2)
#
lines(bvdenshouse,lwd=4,col="red")
text( -1.50,0.6,"Democrats",font=2,cex=1.2,col="blue")
text(  1.75,0.6, "Republicans",font=2,cex=1.2,col="red")
arrows(1.160, 0.07,1.160,0.0,length=0.1,lwd=3,col="red4")
text(1.160,.11,"Chaffetz",font=2)
arrows( 0.931, 0.07, 0.931,0.0,length=0.1,lwd=3,col="red4")
text( 0.931,.08,"McCarthy",font=2)
?pnorm()
pnorm(0,lower.tail=FALSE)*2
pnorm(-1,lower.tail=FALSE)*2
pnorm(-1,lower.tail=FALSE)
pnorm(-1,lower.tail=FALSE)
pnorm(-1,lower.tail=TRUE)
pnorm(5,lower.tail=FALSE)
pnorm(11,lower.tail=FALSE)
pnorm(20,lower.tail=FALSE)
pnorm(10,lower.tail=FALSE)
pnorm(5,lower.tail=FALSE)
pnorm(4,lower.tail=FALSE)
pnorm(3,lower.tail=FALSE)
pnorm(-3,lower.tail=FALSE)
pnorm(-3,lower.tail=T)
pnorm(3,lower.tail=T)
pnorm(0,lower.tail=TRUE)*2
pnorm(1,lower.tail=TRUE)*2
pnorm(2,lower.tail=TRUE)*2
pnorm(3,lower.tail=TRUE)*2
pnorm(4,lower.tail=TRUE)*2
pnorm(5,lower.tail=TRUE)*2
pnorm(6,lower.tail=TRUE)*2
pnorm(11111,lower.tail=TRUE)*2
pnorm(1,lower.tail=TRUE)*2
pnorm(0,lower.tail=TRUE)*2
pnorm(00.01,lower.tail=TRUE)*2
pnorm(5454545454544,lower.tail=TRUE)*2
pnorm(-1,lower.tail=TRUE)*2
pnorm(-1,lower.tail=FALSE)*2
pnorm(1,lower.tail=FALSE)*2
pnorm(0,lower.tail=FALSE)*2
pnorm(99,lower.tail=FALSE)*2
pnorm(9,lower.tail=FALSE)*2
pnorm(2,lower.tail=FALSE)*2
pnorm(1,lower.tail=FALSE)*2
pnorm(0,lower.tail=FALSE)*2
pnorm(11,lower.tail=FALSE)*2
pnorm(2,lower.tail=FALSE)*2
pnorm(4,lower.tail=FALSE)*2
pnorm(3,lower.tail=FALSE)*2
pnorm(2,lower.tail=FALSE)*2
pnorm(5,lower.tail=FALSE)*2
setwd("/home/daniel_hd/Escritorio/DIPUTADOS/data")
library(wnominate)
library(ggplot2)
library(plyr)
library(stringr)
votaciones <- read.csv("cambia sentido votaciones/votaciones.csv", header = TRUE, sep = ',', na.strings = "", stringsAsFactors=FALSE)
votaciones <- read.csv("/cambia sentido votaciones/votaciones.csv", header = TRUE, sep = ',', na.strings = "", stringsAsFactors=FALSE)
votaciones <- read.csv("/home/daniel_hd/Documentos/DIPUTADOS/data/cambia sentido votaciones/votaciones.csv", header = TRUE, sep = ',', na.strings = "", stringsAsFactors=FALSE)
votaciones[votaciones$Partido=="MRN", "Partido"] <- "MORENA"
votaciones[votaciones$Partido=="PNA", "Partido"] <- "PANAL"
votaciones$Diputado <- str_replace_all(votaciones$Diputado, "[[:punct:]]", " ")
votaciones$Diputado <- str_replace_all(votaciones$Diputado, "[^[:alnum:]]", " ")
votaciones$Diputado <- trimws(votaciones$Diputado)
# Se corrigen dos dictámentes que tienen errores en sus nombres
votaciones[grep("(en lo particular el artículo séptimo transitorio, si se acepta a discusión la modificación propuesta por la diputada Minerva Hernández Ramos)",
votaciones$Dictamen), "Dictamen"] <- "De la Comisión de Hacienda y Crédito Público, con proyecto de decreto por el que se reforman, adicionan y derogan diversas disposiciones de la Ley Federal de Derechos (en lo particular el artículo séptimo transitorio, si se acepta a discusión la modificación propuesta por la diputada Minerva Hernández Ramos)"
votaciones[grep("(en lo particular los artículos 5, 8, 18-B, 61-A, 61-F, 86-D-2, 148, 173, 194-H, 231-A, 233, 244-A, 288, 288-A-1, segundo y sexto transitorios, en sus términos; y los artículos 30-C y 31-A con las modificaciones aceptadas por la asamblea)",
votaciones$Dictamen), "Dictamen"] <- "De la Comisión de Hacienda y Crédito Público, con proyecto de decreto por el que se reforman, adicionan y derogan diversas disposiciones de la Ley Federal de Derechos (en lo particular los artículos 5, 8, 18-B, 61-A, 61-F, 86-D-2, 148, 173, 194-H, 231-A, 233, 244-A, 288, 288-A-1, segundo y sexto transitorios, en sus términos; y los artículos 30-C y 31-A con las modificaciones aceptadas por la asamblea)"
votaciones <- within(votaciones, diputado_partido <- paste(Diputado,Partido,sep=' - ')) ## Se añade columna con identificado único de diputados (NOMBRE - PARTIDO)
########### Se genera data frame con información de legistadores (sólo incluye nombre y partido):
diputado_partido <- votaciones[ , c("Diputado", "Partido", "diputado_partido") ]
diputado_partido <- count(diputado_partido, vars = c("Diputado", "Partido", "diputado_partido")) ## Se filtran legisladores únicos y se indica su frecuencia.
diputado_partido$id_diputado <- paste("D_",c(1:length(diputado_partido$Diputado)), sep="") ## Se generan ids de diputados (ya que no todos tienen uno)
votaciones <- merge(diputado_partido[, c("diputado_partido", "id_diputado")], votaciones, by="diputado_partido") ## coloca (NOMBRE - PARTIDO) en la tabla de votaciones:
diputado_partido <- diputado_partido[!is.na(diputado_partido$Diputado), ]
ggplot(diputado_partido, aes(Partido, freq)) +
geom_boxplot() +
scale_y_continuous(breaks = seq(0, 800, 100)) +
labs(title = "Votaciones por diputado", subtitle = "Frecuencias para diputados que votaron al menos una vez", y = "frecuencia", x="partido")
diputado_partido[duplicated(diputado_partido$Diputado), 1]
legis.data <- data.frame(party = as.factor(diputado_partido$Partido),
partyCode = as.numeric(as.factor(diputado_partido$Partido)) )
legisladores <- diputado_partido$diputado_partido
dictamenes <- count(votaciones, vars = c("Dictamen")) # Se filtran legisladores únicos y se indica su frecuencia.
dictamenes$id_votacion <- paste("V_",c(1:length(dictamenes$Dictamen)), sep="") # Añade indicador único a cada votación
votaciones <- merge(dictamenes[, c("Dictamen", "id_votacion")], votaciones, by="Dictamen") # coloca los ids en la tabla de votaciones
votes <- matrix(0L, nrow=length(diputado_partido$id_diputado), ncol=length(dictamenes$id_votacion) )
rownames(votes) <- diputado_partido$id_diputado
colnames(votes) <- dictamenes$id_votacion
## Itera sobre los ids de diputados y votaciones para crear matriz numérica:
## De acuerdo a los códigos en el diccionario de datos: 1=favor / 2=contra / 3=abstención / 4=quorum / 5=ausencia
for(dictamen in dictamenes$id_votacion){
votos_dictamen <- votaciones[votaciones$id_votacion==dictamen,c("id_votacion", "id_diputado", "Voto")]
for(legislador in diputado_partido$id_diputado){
voto_registrado <- votos_dictamen[votos_dictamen$id_votacion==dictamen & votos_dictamen$id_diputado==legislador ,"Voto"]
if(length(voto_registrado)>0){
votes[legislador, dictamen] <- voto_registrado
}
}
}
write.csv(votes,"matriz de votaciones.csv") # se puede importar esta matriz
write.csv(votaciones,"votaciones_id.csv") ## La comparación con los ids se puede consultar con este archivo (uso los ids porque son más ligeros)
votos_partido <- as.data.frame(votes)
votos_partido$diputado <- diputado_partido$Diputado
votos_partido$partido <- diputado_partido$Partido
votos_partido
partidos <- levels(as.factor(votos_partido$partido))
for(id_voto in dictamenes$id_votacion){
votos_dictamen <- votos_partido[, c("partido", id_voto)] # filtra la columna de partido y dictamen
votos_dictamen <- count(votos_dictamen , vars = c("partido", id_voto))
for(partido in partidos){
a_favor      <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==1 ,"freq"]
en_contra    <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==2 ,"freq"]
abstenciones <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==3 ,"freq"]
quorum       <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==4 ,"freq"]
ausencia     <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==5 ,"freq"]
if(length(abstenciones) > 0){
if(length(a_favor) > 0 & length(en_contra) > 0 ){
# Si el diputado se abstuvo y la mayoría de su bancada votó a favor, esa abstención se convierte en un voto en contra.
if(a_favor > en_contra & a_favor > abstenciones){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstención", "en contra", partido, id_voto, a_favor, sep=",") )
}
#  Si el diputado se abstuvo y la mayoría de su bancada votó en contra, esa abstención se convierte en un voto a favor.
if(en_contra > a_favor & en_contra > abstenciones){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 1
print( paste(abstenciones, "abstención", "a favor", partido, id_voto, en_contra, sep=",") )
}
#  Si el diputado se abstuvo y la mayoría de su bancada se abstuvo, esa abstención se convierte en un voto en contra.
if(en_contra > a_favor & en_contra > abstenciones){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 1
print( paste(abstenciones, "abstención", "en contra", partido, id_voto, en_contra, sep=",") )
}
}else{
if(length(a_favor) > 0){
# Si el diputado se abstuvo y la mayoría de su bancada votó a favor, esa abstención se convierte en un voto en contra.
if(a_favor > abstenciones){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "en contra", partido, id_voto, a_favor, sep=",") )
}
}
if(length(en_contra) > 0){
#  Si el diputado se abstuvo y la mayoría de su bancada votó en contra, esa abstención se convierte en un voto a favor.
if(en_contra > abstenciones){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 1
print( paste(abstenciones, "a favor", partido, id_voto, en_contra, sep=",") )
}
}
}
}
}
}
a_favor
en_contra
abstenciones
quorum
ausencia
quorum
quorum
is.null(quorum)
length(quorum)
a_favor
a_favor
en_contra
abstenciones
quorum
ausencia
if(length(a_favor)==0){a_favor <- 0}
if(length(en_contra)==0){en_contra <- 0}
if(length(abstenciones)==0){abstenciones <- 0}
if(length(quorum)==0){quorum <- 0}
if(length(ausencia)==0){ausencia <- 0}
a_favor
en_contra
abstenciones
quorum
ausencia
max(a_favor, en_contra, abstenciones, quorum, ausencias)
max(a_favor, en_contra, abstenciones, quorum, ausencia)
partido
partido == "IND"
votos_partido <- as.data.frame(votes)
votos_partido$diputado <- diputado_partido$Diputado
votos_partido$partido <- diputado_partido$Partido
votos_partido <- as.data.frame(votes)
votos_partido$diputado <- diputado_partido$Diputado
votos_partido$partido <- diputado_partido$Partido
partidos <- levels(as.factor(votos_partido$partido))
for(id_voto in dictamenes$id_votacion){
votos_dictamen <- votos_partido[, c("partido", id_voto)] # filtra la columna de partido y dictamen
votos_dictamen <- count(votos_dictamen , vars = c("partido", id_voto))
for(partido in partidos){
a_favor      <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==1 ,"freq"]
en_contra    <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==2 ,"freq"]
abstenciones <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==3 ,"freq"]
quorum       <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==4 ,"freq"]
ausencias     <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==5 ,"freq"]
## Si no hay ninguna votación en cierto sentido para una bancada, R asigna un vector de longitud cero; se corrige para un valor numérico
if(length(a_favor)==0){ a_favor <- 0 }
if(length(en_contra)==0){ en_contra <- 0 }
if(length(abstenciones)==0){ abstenciones <- 0 }
if(length(quorum)==0){ quorum <- 0 }
if(length(ausencias)==0){ ausencias <- 0 }
if(abstenciones > 0){ # existen abstenciones en esa bancada
# Si el diputado era independiente o no tenía bancada, esa abstención se convirtió en voto en contra.
if(partido == "IND" | partido == "SP"){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada votó a favor, esa abstención se convierte en un voto en contra.
else if(a_favor > en_contra & a_favor > abstenciones & a_favor > quorum & a_favor > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "a favor (mayoría)", a_favor, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada votó en contra, esa abstención se convierte en un voto a favor.
else if(en_contra > a_favor & en_contra > abstenciones & en_contra > quorum & en_contra > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 1
print( paste(abstenciones, "abstenciones (originales)", "a favor (cambio)", partido, id_voto, "en contra (mayoría)", en_contra, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada se abstuvo, esa abstención se convierte en un voto en contra.
else if(abstenciones > a_favor & abstenciones > en_contra  & abstenciones > quorum  & abstenciones > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "abstención (mayoría)", abstenciones, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada se ausentó, esa abstención se convirtió en un voto en contra.
else if(ausencias > a_favor & ausencias > en_contra  & ausencias > abstenciones  & ausencias > quorum){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "ausencia (mayoría)", abstenciones, sep=",") )
}
# Cualquier otro escenario (la acción mayoritaria de la bancada estuvo empatada), esa abstención se convirtió en un voto en contra.
else{
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "empate (mayoría)", max(a_favor, en_contra, abstenciones, quorum, ausencias), sep=",") )
}
}
if(quorum > 0){ # existen quorums en esa bancada
# Si el diputado voto quorum y la mayoría de su bancada votó a favor, ese quorum se convierte en un voto en contra.
if(a_favor > en_contra & a_favor > abstenciones & a_favor > quorum & a_favor > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==4, id_voto] <- 2
print( paste(abstenciones, "quorums (originales)", "en contra (cambio)", partido, id_voto, "a favor (mayoría)", a_favor, sep=",") )
}
# Si el diputado voto quorum y la mayoría de su bancada votó en contra, ese quorum se convierte en un voto a favor.
else if(quorum > a_favor & quorum > en_contra & quorum > abstenciones & quorum > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==4, id_voto] <- 1
print( paste(abstenciones, "quorums (originales)", "a favor (cambio)", partido, id_voto, "en contra (mayoría)", en_contra, sep=",") )
}
}
}
}
write.csv(votos_partido,"matriz de votaciones cambio_abstenciones.csv")
## y guarda el objeto
matriz_votaciones_corregida <- as.matrix(votos_partido[,c(1:length(dictamenes$id_votacion))])
write.csv(votos_partido,"matriz de votaciones cambios.csv")
## y guarda el objeto
matriz_votaciones_corregida <- as.matrix(votos_partido[,c(1:length(dictamenes$id_votacion))])
votos_partido <- as.data.frame(votes)
votos_partido$diputado <- diputado_partido$Diputado
votos_partido$partido <- diputado_partido$Partido
votos_partido <- as.data.frame(votes)
votos_partido$diputado <- diputado_partido$Diputado
votos_partido$partido <- diputado_partido$Partido
partidos <- levels(as.factor(votos_partido$partido))
for(id_voto in dictamenes$id_votacion){
votos_dictamen <- votos_partido[, c("partido", id_voto)] # filtra la columna de partido y dictamen
votos_dictamen <- count(votos_dictamen , vars = c("partido", id_voto))
for(partido in partidos){
a_favor      <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==1 ,"freq"]
en_contra    <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==2 ,"freq"]
abstenciones <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==3 ,"freq"]
quorum       <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==4 ,"freq"]
ausencias     <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==5 ,"freq"]
## Si no hay ninguna votación en cierto sentido para una bancada, R asigna un vector de longitud cero; se corrige para un valor numérico
if(length(a_favor)==0){ a_favor <- 0 }
if(length(en_contra)==0){ en_contra <- 0 }
if(length(abstenciones)==0){ abstenciones <- 0 }
if(length(quorum)==0){ quorum <- 0 }
if(length(ausencias)==0){ ausencias <- 0 }
if(abstenciones > 0){ # existen abstenciones en esa bancada
# Si el diputado era independiente o no tenía bancada, esa abstención se convirtió en voto en contra.
if(partido == "IND" | partido == "SP"){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada votó a favor, esa abstención se convierte en un voto en contra.
else if(a_favor > en_contra & a_favor > abstenciones & a_favor > quorum & a_favor > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "a favor (mayoría)", a_favor, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada votó en contra, esa abstención se convierte en un voto a favor.
else if(en_contra > a_favor & en_contra > abstenciones & en_contra > quorum & en_contra > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 1
print( paste(abstenciones, "abstenciones (originales)", "a favor (cambio)", partido, id_voto, "en contra (mayoría)", en_contra, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada se abstuvo, esa abstención se convierte en un voto en contra.
else if(abstenciones > a_favor & abstenciones > en_contra  & abstenciones > quorum  & abstenciones > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "abstención (mayoría)", abstenciones, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada se ausentó, esa abstención se convirtió en un voto en contra.
else if(ausencias > a_favor & ausencias > en_contra  & ausencias > abstenciones  & ausencias > quorum){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "ausencia (mayoría)", abstenciones, sep=",") )
}
# Cualquier otro escenario (la acción mayoritaria de la bancada estuvo empatada), esa abstención se convirtió en un voto en contra.
else{
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "empate (mayoría)", max(a_favor, en_contra, abstenciones, quorum, ausencias), sep=",") )
}
}
if(quorum > 0){ # existen quorums en esa bancada
# Si el diputado voto quorum y la mayoría de su bancada votó a favor, ese quorum se convierte en un voto en contra.
if(a_favor > en_contra & a_favor > abstenciones & a_favor > quorum & a_favor > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==4, id_voto] <- 2
print( paste(abstenciones, "quorums (originales)", "en contra (cambio)", partido, id_voto, "a favor (mayoría)", a_favor, sep=",") )
}
# Si el diputado voto quorum y la mayoría de su bancada votó en contra, ese quorum se convierte en un voto a favor.
else if(en_contra > a_favor & en_contra > abstenciones & en_contra > quorum & en_contra > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==4, id_voto] <- 1
print( paste(abstenciones, "quorums (originales)", "a favor (cambio)", partido, id_voto, "en contra (mayoría)", en_contra, sep=",") )
}
}
}
}
votos_partido <- as.data.frame(votes)
votos_partido$diputado <- diputado_partido$Diputado
votos_partido$partido <- diputado_partido$Partido
partidos <- levels(as.factor(votos_partido$partido))
for(id_voto in dictamenes$id_votacion){
votos_dictamen <- votos_partido[, c("partido", id_voto)] # filtra la columna de partido y dictamen
votos_dictamen <- count(votos_dictamen , vars = c("partido", id_voto))
for(partido in partidos){
a_favor      <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==1 ,"freq"]
en_contra    <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==2 ,"freq"]
abstenciones <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==3 ,"freq"]
quorum       <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==4 ,"freq"]
ausencias     <- votos_dictamen[votos_dictamen$partido==partido & votos_dictamen[,id_voto] ==5 ,"freq"]
## Si no hay ninguna votación en cierto sentido para una bancada, R asigna un vector de longitud cero; se corrige para un valor numérico
if(length(a_favor)==0){ a_favor <- 0 }
if(length(en_contra)==0){ en_contra <- 0 }
if(length(abstenciones)==0){ abstenciones <- 0 }
if(length(quorum)==0){ quorum <- 0 }
if(length(ausencias)==0){ ausencias <- 0 }
if(abstenciones > 0){ # existen abstenciones en esa bancada
# Si el diputado era independiente o no tenía bancada, esa abstención se convirtió en voto en contra.
if(partido == "IND" | partido == "SP"){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada votó a favor, esa abstención se convierte en un voto en contra.
else if(a_favor > en_contra & a_favor > abstenciones & a_favor > quorum & a_favor > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "a favor (mayoría)", a_favor, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada votó en contra, esa abstención se convierte en un voto a favor.
else if(en_contra > a_favor & en_contra > abstenciones & en_contra > quorum & en_contra > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 1
print( paste(abstenciones, "abstenciones (originales)", "a favor (cambio)", partido, id_voto, "en contra (mayoría)", en_contra, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada se abstuvo, esa abstención se convierte en un voto en contra.
else if(abstenciones > a_favor & abstenciones > en_contra  & abstenciones > quorum  & abstenciones > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "abstención (mayoría)", abstenciones, sep=",") )
}
# Si el diputado se abstuvo y la mayoría de su bancada se ausentó, esa abstención se convirtió en un voto en contra.
else if(ausencias > a_favor & ausencias > en_contra  & ausencias > abstenciones  & ausencias > quorum){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "ausencia (mayoría)", abstenciones, sep=",") )
}
# Cualquier otro escenario (la acción mayoritaria de la bancada estuvo empatada), esa abstención se convirtió en un voto en contra.
else{
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==3,id_voto] <- 2
print( paste(abstenciones, "abstenciones (originales)", "en contra (cambio)", partido, id_voto, "empate (mayoría)", max(a_favor, en_contra, abstenciones, quorum, ausencias), sep=",") )
}
}
if(quorum > 0){ # existen quorums en esa bancada
# Si el diputado voto quorum y la mayoría de su bancada votó a favor, ese quorum se convierte en un voto en contra.
if(a_favor > en_contra & a_favor > abstenciones & a_favor > quorum & a_favor > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==4, id_voto] <- 2
print( paste(quorum, "quorums (originales)", "en contra (cambio)", partido, id_voto, "a favor (mayoría)", a_favor, sep=",") )
}
# Si el diputado voto quorum y la mayoría de su bancada votó en contra, ese quorum se convierte en un voto a favor.
else if(en_contra > a_favor & en_contra > abstenciones & en_contra > quorum & en_contra > ausencias){
votos_partido[votos_partido$partido==partido & votos_partido[,id_voto]==4, id_voto] <- 1
print( paste(quorum, "quorums (originales)", "a favor (cambio)", partido, id_voto, "en contra (mayoría)", en_contra, sep=",") )
}
}
}
}
write.csv(votos_partido,"matriz de votaciones cambios.csv")
library(tnet)
install.packages("tnet")
install.library("koRpus")
install.packages("koRpus")
install_github("unDocUMeantIt/koRpus.lang.es")
library(devtools)
install_github("unDocUMeantIt/koRpus.lang.es")
install.packages("koRpus")
install.packages("sylly")
install_github("unDocUMeantIt/koRpus.lang.es")
install.packages("sylly.es")
install.packages("sylly", repo=c(getOption("repos"), reaktanz="https://reaktanz.es/R"))
install.packages("sylly", repo=c(getOption("repos"), reaktanz="https://reaktanz.es/R"))
install_github("unDocUMeantIt/koRpus.lang.es")
install.packages("sylly.es", repo="https://undocumeantit.github.io/repos/l10n")
install_github("unDocUMeantIt/sylly.es") # stable release
install_github("unDocUMeantIt/koRpus.lang.es")
install_github("unDocUMeantIt/koRpus") # stable release
install_github("unDocUMeantIt/koRpus.lang.es")
library(koRpus.lang.es)
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="es", TT.options=list(path="./TreeTagger", preset="es"))
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="es", TT.options=list( preset="es"))
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="es")
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), format="obj",
TT.tknz=FALSE , lang="es")
lang.support.es()
treetag(c("anfitriona", "ambientalista", "americanos"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="es", TT.options=list(path="./TreeTagger", preset="en"))
treetag(c("anfitriona", "ambientalista", "americanos"), format="obj",
TT.tknz=FALSE , lang="es")
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="es", TT.options=list(path="/home/daniel_hd/R/x86_64-pc-linux-gnu-library/3.4/koRpus.lang.es", preset="es"))
treetag(c("anfitriona", "ambientalista", "americanos"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="es", TT.options=list(path="/home/daniel_hd/R/x86_64-pc-linux-gnu-library/3.4/koRpus.lang.es", preset="es"))
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="es", TT.options=list(path="~/bin/treetagger", preset="es"))
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="es", TT.options=list(path="~/bin/treetagger/cmd/tree-tagger-english", preset="es"))
tagged.text <- treetag("~/docs/sample_text.txt", treetagger="manual",
lang="en", TT.options=c(path="~/bin/treetagger/", preset="en"))
tagged.text <- treetag("sad mouse doggy", treetagger="manual",
lang="en", TT.options=c(path="~/bin/treetagger/", preset="en"))
tagged.text <- treetag(c("sad", "mouse", "doggy"), treetagger="manual",
lang="en", TT.options=c(path="~/bin/treetagger/", preset="en"))
tagged.results <- treetag(c("run", "ran", "running"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="en",
TT.options=list(path="./TreeTagger", preset="en"))
tagged.results <- treetag(c("run", "ran", "running"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="en",
TT.options=list(path="./TreeTagger", preset="en"))
tagged.results
set.kRp.env(lang="es", validate = TRUE)
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), treetagger="manual", format="obj", TT.tknz=FALSE , lang="es")
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), format="obj", TT.tknz=FALSE , lang="es")
set.kRp.env(lang="es", validate = TRUE)
set.kRp.env("treetag", lang="es", validate = TRUE)
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), format="obj", TT.tknz=FALSE , lang="es")
set.kRp.env("treetagger", lang="es", validate = TRUE)
agged.results <- treetag(c("anfitriona", "ambientalista", "americanos"), format="obj", TT.tknz=FALSE , lang="es")
treetag(c("run", "ran", "running"), treetagger="manual", format="obj",
TT.tknz=FALSE , lang="en",
TT.options=list(path="./TreeTagger", preset="en"))
library(dendextend)
library(clValid)
install.packages("clValid")
?dunn()
library(clValid)
?dunn()
source("scripts/multifunction.R")
setwd("/home/daniel_hd/Tesis/Data/Publicables/Código Desarrollado/")
source("multifunction.R")
library(ggplot2)
library(dplyr)
library(plyr)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("/home/daniel_hd/Tesis/Data/Publicables/Código Desarrollado/")
source("multifunction.R")
